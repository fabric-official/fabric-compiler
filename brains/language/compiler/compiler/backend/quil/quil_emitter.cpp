// quil_emitter.cpp
#include "mlir/IR/MLIRContext.h"
#include "mlir/IR/BuiltinOps.h"
#include "mlir/Parser.h"
#include "mlir/Support/FileUtilities.h"
#include "mlir/Support/LogicalResult.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/raw_ostream.h"

using namespace mlir;

static llvm::cl::opt<std::string> inputFilename(
    llvm::cl::Positional, llvm::cl::desc("<input MLIR file>"), llvm::cl::init("-"));

static llvm::cl::opt<std::string> outputFilename(
    "o", llvm::cl::desc("Output Quil file (default stdout)"), llvm::cl::init("-"));

static LogicalResult emitQuil(ModuleOp module)
{
    std::string quilText;
    llvm::raw_string_ostream os(quilText);

    // Header (optional)
    os << "# Generated by Fabric Quil Emitter\n\n";

    module.walk([&](Operation *op)
                {
                    if (op->getName().getDialectNamespace() != "fab_quantum")
                        return;

                    StringRef name = op->getName().getStringRef();
                    if (name == "fab.quantum.h")
                    {
                        // Single-qubit Hadamard
                        os << "H " << op->getOperand(0) << "\n";
                    }
                    else if (name == "fab.quantum.cnot")
                    {
                        os << "CNOT "
                           << op->getOperand(0) << " " << op->getOperand(1) << "\n";
                    }
                    else if (name == "fab.quantum.rx")
                    {
                        double angle = op->getAttrOfType<FloatAttr>("angle").getValueAsDouble();
                        os << "RX(" << angle << ") " << op->getOperand(0) << "\n";
                    }
                    else if (name == "fab.quantum.u3")
                    {
                        auto theta = op->getAttrOfType<FloatAttr>("theta").getValueAsDouble();
                        auto phi = op->getAttrOfType<FloatAttr>("phi").getValueAsDouble();
                        auto lambda = op->getAttrOfType<FloatAttr>("lambda").getValueAsDouble();
                        os << "U3(" << theta << ", " << phi << ", " << lambda << ") "
                           << op->getOperand(0) << "\n";
                    }
                    else if (name == "fab.quantum.measure")
                    {
                        os << "MEASURE " << op->getOperand(0)
                           << " [" << op->getResult(0) << "]\n";
                    }
                    // extend for other fab_quantum ops...
                });

    std::error_code ec;
    llvm::raw_fd_ostream out(outputFilename, ec);
    if (ec)
    {
        llvm::errs() << "Cannot open '" << outputFilename
                     << "': " << ec.message() << "\n";
        return failure();
    }
    out << os.str();
    return success();
}

int main(int argc, char **argv)
{
    llvm::cl::ParseCommandLineOptions(argc, argv,
                                      "Fabric Quil Emitter\n");

    MLIRContext context;
    context.getOrLoadDialect("fab_quantum");

    // Read MLIR module
    auto file = openInputFile(inputFilename);
    if (!file)
    {
        llvm::errs() << "Failed to open input file\n";
        return 1;
    }
    SourceMgr sourceMgr;
    sourceMgr.AddNewSourceBuffer(std::move(*file), SMLoc());
    auto module = parseSourceFile<ModuleOp>(sourceMgr, &context);
    if (!module)
    {
        llvm::errs() << "Failed to parse MLIR\n";
        return 1;
    }

    return emitQuil(*module).succeeded() ? 0 : 1;
}
